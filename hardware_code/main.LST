C51 COMPILER V9.01   MAIN                                                                  02/09/2019 20:00:05 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: E:\keil_class\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #define MAIN_Fosc   22118400L //定义主时钟
   2          
   3          #include <string.h>
   4          #include  "STC15Fxxxx.H"
   5          
   6          typedef unsigned char  uchar;
   7          
   8          
   9          /***********************************************************/
  10          
  11          #define DIS_DOT   0x20
  12          #define DIS_BLACK 0x10
  13          #define DIS_    0x11
  14          
  15          
  16          /****************************** 用户定义宏 ***********************************/
  17          
  18          
  19          #define Timer0_Reload (65536UL -(MAIN_Fosc / 1000))   //Timer 0 中断频率, 1000次/秒
  20          
  21          /*****************************************************************************/
  22          
  23          
  24          
  25          
  26          /*************  本地常量声明  **************/
  27          u8 code t_display[]={           //标准字库
  28          //   0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
  29            0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,0x77,0x7C,0x39,0x5E,0x79,0x71,
  30          //black  -     H    J  K    L    N  o   P  U     t    G    Q    r   M    y
  31            0x00,0x40,0x76,0x1E,0x70,0x38,0x37,0x5C,0x73,0x3E,0x78,0x3d,0x67,0x50,0x37,0x6e,
  32            0xBF,0x86,0xDB,0xCF,0xE6,0xED,0xFD,0x87,0xFF,0xEF,0x46};  //0. 1. 2. 3. 4. 5. 6. 7. 8. 9. -1
  33          
  34          u8 code T_COM[]={0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};    //位码
  35          u8 day_num[]={31,28,31,30,31,30,31,31,30,31,30,31};
  36          
  37          #define     Baudrate1           115200L
  38          #define     UART1_BUF_LENGTH    32
  39          
  40          /*************  IO口定义  **************/
  41          sbit  P_HC595_SER   = P4^0; //pin 14  SER   data input
  42          sbit  P_HC595_RCLK  = P5^4; //pin 12  RCLk  store (latch) clock
  43          sbit  P_HC595_SRCLK = P4^3; //pin 11  SRCLK Shift data clock
  44          
  45          
  46          /*************  本地变量声明  **************/
  47          
  48          u8  LED8[8];    //显示缓冲
  49          
  50          u8  display_index;  //显示位索引
  51          bit B_1ms;      //1ms标志
  52          
  53          u8  IO_KeyState, IO_KeyState1, IO_KeyHoldCnt; //行列键盘变量
  54          u8  KeyHoldCnt; //键按下计时
  55          u8  KeyCode;  //给用户使用的键码, 1~16有效
C51 COMPILER V9.01   MAIN                                                                  02/09/2019 20:00:05 PAGE 2   

  56          u8  cnt50ms;
  57          u8  try,able;
  58          
  59          u8  month,day,hour,minute,second; //RTC变量
  60          u8  curr_input;
  61          u8  key[] = {0, 0, 0, 0, 0, 0, 0, 0};
  62          u8  standard[] = {1, 2, 3, 4};
  63          u8  curr_show;  // 0显示时间，1显示日期，2显示温度
  64          u8  open;
  65          u16 year;
  66          u16 msecond, opentime, trytime;
  67          
  68          //记录当前状态
  69          u8 curr_state;   //0代表正常，关闭;1代表正常，开启；2代表异常，关闭（密码输错多次/异常情况）
  70          
  71          u8  TX1_Cnt;    //发送计数
  72          u8  RX1_Cnt;    //接收计数
  73          bit B_TX1_Busy; //发送忙标志
  74          u8  idata RX1_Buffer[UART1_BUF_LENGTH]; //接收缓冲
  75          u8* Send_String;
  76          
  77          u8 ptr; //接收ptr
  78          u8 control_status; //控制状态
  79          u8 control_order[10];
  80          
  81          
  82          
  83          /*************  本地函数声明  **************/
  84          void  CalculateAdcKey(u16 adc);
  85          void  Display(u8 curr_show);
  86          void  IO_KeyScan(void); //50ms call
  87          void  WriteNbyte(u8 addr, u8 *p, u8 number);
  88          void  ReadNbyte( u8 addr, u8 *p, u8 number);
  89          void  DisplayTime(void);
  90          void  DisplayDate(void);
  91          void  DisplayTemp(void);
  92          void  DisplayKey(void);
  93          void  DisplayNewKey(void);
  94          void  reKey(void);
  95          void  changeDate(void);
  96          void  changing(u8 KeyCode, u8 curr_show);
  97          void  ReadRTC(void);
  98          void  WriteRTC(void);
  99          void  alert(u8 _code);
 100          void  delay_ms(u8 ms);
 101          u16   get_temperature(u16 adc);
 102          u16   Get_ADC10bitResult(u8 channel); //channel = 0~7
 103          void    UART1_config(u8 brt);   // 选择波特率, 2: 使用Timer2做波特率, 其它值: 使用Timer1做波特率.
 104          void    PrintString1(u8 *puts);
 105          u8    *my_itoa(u16 n);
 106          //wifi模块
 107          void connect_init(); 
 108          void UartConfiguration();
 109          void esp8266_init();
 110          void  set_Status(); //设置状态 用于移动端控制
 111          void sendStatus(u8 sta);
 112          void Uart();
 113          
 114          
 115          
 116                                 
 117          /****************  外部函数声明和外部变量声明 *****************/
C51 COMPILER V9.01   MAIN                                                                  02/09/2019 20:00:05 PAGE 3   

 118          
 119          
 120          /**********************************************/
 121          void main(void)
 122          {
 123   1        u8  i;
 124   1      
 125   1        P0M1 = 0; P0M0 = 0; //设置为准双向口
 126   1        P1M1 = 0; P1M0 = 0; //设置为准双向口
 127   1        P2M1 = 0; P2M0 = 0; //设置为准双向口
 128   1        P3M1 = 0; P3M0 = 0; //设置为准双向口
 129   1        P4M1 = 0; P4M0 = 0; //设置为准双向口
 130   1        P5M1 = 0; P5M0 = 0; //设置为准双向口
 131   1        P6M1 = 0; P6M0 = 0; //设置为准双向口
 132   1        P7M1 = 0; P7M0 = 0; //设置为准双向口
 133   1        
 134   1        P1ASF = 0x0C;   //P1.2 P1.3做ADC
 135   1        ADC_CONTR = 0xE0; //90T, ADC power on
 136   1        
 137   1        display_index = 0;
 138   1        curr_show = 0;
 139   1        curr_input = 0;
 140   1        curr_state = 0;
 141   1        opentime = 0;
 142   1        trytime = 0;
 143   1        AUXR = 0x80;  //Timer0 set as 1T, 16 bits timer auto-reload, 
 144   1        TH0 = (u8)(Timer0_Reload / 256);
 145   1        TL0 = (u8)(Timer0_Reload % 256);
 146   1        ET0 = 1;  //Timer0 interrupt enable
 147   1        TR0 = 1;  //Tiner0 run
 148   1      
 149   1        UART1_config(1);    // 选择波特率, 2: 使用Timer2做波特率, 其它值: 使用Timer1做波特率.
 150   1        EA = 1;   //打开总中断
 151   1        
 152   1        for(i=0; i<8; i++)  LED8[i] = 0x10; //上电消隐
 153   1      
 154   1        esp8266_init();
 155   1        ReadRTC();
 156   1        F0 = 0;
 157   1        month = 1;
 158   1        year = 2019;
 159   1        day = 1;
 160   1        if(second >= 60)  F0 = 1; //错误
 161   1        if(minute >= 60)  F0 = 1; //错误
 162   1        if(hour   >= 24)  F0 = 1; //错误
 163   1        if(F0)  //有错误, 默认12:00:00
 164   1        {
 165   2          second = 0;
 166   2          minute = 0;
 167   2          hour  = 12;
 168   2          WriteRTC();
 169   2        }
 170   1      
 171   1        Display(curr_show);
 172   1        open = 0;
 173   1        try = 0;
 174   1        able = 1;
 175   1      
 176   1        KeyHoldCnt = 0; //键按下计时
 177   1        KeyCode = 0;  //给用户使用的键码, 1~16有效
 178   1      
 179   1        IO_KeyState = 0;
C51 COMPILER V9.01   MAIN                                                                  02/09/2019 20:00:05 PAGE 4   

 180   1        IO_KeyState1 = 0;
 181   1        IO_KeyHoldCnt = 0;
 182   1        cnt50ms = 0;
 183   1        
 184   1        while(1)
 185   1        {
 186   2          if(B_1ms) //1ms到
 187   2          {
 188   3            set_Status();
 189   3            if(open == 1) opentime++;
 190   3            else opentime = 0;
 191   3            if(opentime >= 2000) reKey();
 192   3            if(opentime >= 9000) alert(2);
 193   3            B_1ms = 0;
 194   3            if(try > 0 && try < 5) trytime++;
 195   3            if(trytime >= 20000){
 196   4                try = 0;
 197   4                trytime = 0;
 198   4            } 
 199   3            if(++msecond >= 1000) //1秒到
 200   3            {
 201   4              msecond = 0;
 202   4              changeDate();
 203   4              ReadRTC();
 204   4              Display(curr_show);
 205   4            }
 206   3      
 207   3            if(++cnt50ms >= 50)   //50ms扫描一次行列键盘
 208   3            {
 209   4              cnt50ms = 0;
 210   4              IO_KeyScan();
 211   4            }
 212   3            
 213   3            if(KeyCode != 0)    //有键按下
 214   3            {
 215   4              if(KeyCode == 27) curr_show = 0; // 时钟模式
 216   4              if(KeyCode == 28) curr_show = 1; // 日期模式
 217   4              if(KeyCode == 29) curr_show = 2; // 温度模式
 218   4              if(KeyCode == 30 && curr_show != 3 && able == 1){   // 输入密码模式
 219   5                curr_show = 3; 
 220   5                curr_input = 0;
 221   5              } 
 222   4              if((KeyCode == 31 && curr_show != 4 && curr_show != 3 && able == 1) || (KeyCode == 31 && curr_show == 
             -3 && curr_input == 0 && able == 1)){
 223   5                curr_show = 4; 
 224   5                  curr_input = 0;
 225   5              }
 226   4           
 227   4              if(KeyCode >= 17 && KeyCode <= 26 && curr_show == 3 && curr_input < 4 && able == 1) //输入密码
 228   4              {
 229   5                LED8[curr_input+4] = KeyCode - 17;
 230   5                key[curr_input] = KeyCode - 17;
 231   5                curr_input++;
 232   5              }
 233   4              if(KeyCode >= 17 && KeyCode <= 26 && curr_show == 4 && curr_input < 8 && able == 1) //修改密码
 234   4              {
 235   5                LED8[curr_input] = KeyCode - 17;
 236   5                key[curr_input] = KeyCode - 17;
 237   5                curr_input++;
 238   5              }
 239   4              else if(KeyCode >= 17 && KeyCode <= 20 && curr_show != 3){  // 时间和日期的调整
 240   5                changing(KeyCode,curr_show);
C51 COMPILER V9.01   MAIN                                                                  02/09/2019 20:00:05 PAGE 5   

 241   5              }
 242   4              if(KeyCode == 30 && curr_show == 3 && curr_input == 4 && able == 1){   // 输入密码模式，检测
 243   5                  if(standard[0] == key[0] && standard[1] == key[1]  && standard[2] == key[2] && standard[3] == key[
             -3]){//密码正确
 244   6                  P17 = 0;
 245   6                  P16 = 0;
 246   6                  P47 = 0;
 247   6                  P46 = 0;
 248   6                  //开门后将小时、分钟、秒钟发送到log主机上
 249   6                  Send_String = my_itoa(hour);
 250   6                    PrintString1(Send_String);   
 251   6                  PrintString1("s");   //空格 用于在接收端区分数字
 252   6                  Send_String = my_itoa(minute);
 253   6                  PrintString1(Send_String);
 254   6                  PrintString1("s");
 255   6                  Send_String = my_itoa(second);
 256   6                  PrintString1(Send_String);
 257   6                  PrintString1("s");
 258   6                  open = 1;
 259   6                  curr_state = 1;
 260   6                  try = 0;
 261   6                }
 262   5                else{
 263   6                  alert(1);
 264   6                  if(++try >= 5){
 265   7                    alert(4);
 266   7                      able = 0;
 267   7                    curr_state = 2;
 268   7                  }
 269   6                  curr_input = 0;
 270   6                }
 271   5              }
 272   4              if(KeyCode == 31 && curr_show == 4 && curr_input == 8 && able == 1){   // 修改密码模式，检测
 273   5                  if(standard[0] == key[0] && standard[1] == key[1]  && standard[2] == key[2] && standard[3] == key[
             -3]){
 274   6                  try = 0;
 275   6                  reKey();
 276   6                  if(key[4] == 0 && key[5] == 0 && key[6] == 0 && key[7] == 0){
 277   7                    alert(3);
 278   7                  }
 279   6                  else{
 280   7                    P17 = 0; P16 = 0;P47 = 0;P46 = 0;
 281   7                    standard[0] = key[4]; 
 282   7                    standard[1] = key[5]; 
 283   7                    standard[2] = key[6]; 
 284   7                    standard[3] = key[7];
 285   7                    delay_ms(1500);              
 286   7                    curr_show = 3;   
 287   7                    curr_state = 0;
 288   7                  } 
 289   6                }
 290   5                
 291   5                else{
 292   6                  alert(1);
 293   6                  if(++try >= 5){
 294   7                    alert(4);
 295   7                    able = 0;
 296   7                    curr_state = 2;
 297   7                  }
 298   6                  curr_input = 0;
 299   6                }
 300   5                
C51 COMPILER V9.01   MAIN                                                                  02/09/2019 20:00:05 PAGE 6   

 301   5              }         
 302   4              if(KeyCode == 32){    // 撤销+关门+门锁复位
 303   5                
 304   5                if(curr_show == 3 && curr_input > 0 && able == 1){
 305   6                  key[curr_input-1] = 0;
 306   6                  LED8[curr_input+3] = DIS_;
 307   6                  curr_input--;
 308   6                }
 309   5                else if(curr_show == 4 && curr_input > 0 && able == 1) {
 310   6                  key[curr_input-1] = 0;
 311   6                  LED8[curr_input-1] = DIS_;
 312   6                  curr_input--;
 313   6                }
 314   5                else{
 315   6                  open = 0;
 316   6                  reKey();
 317   6                  curr_show = 0;
 318   6                  curr_state = 0;
 319   6                }
 320   5        
 321   5              }  
 322   4      
 323   4      
 324   4      
 325   4              Display(curr_show);
 326   4              KeyCode = 0;
 327   4          
 328   4            }
 329   3            //每个循环与移动端进行通信
 330   3            Uart();
 331   3      
 332   3          }
 333   2        }
 334   1      } 
 335          /******************************/
 336          void  changeDate(void){
 337   1        if(hour == 0 && minute == 0 && second == 0)
 338   1          changing(19,1);
 339   1      }
 340          void  changing(u8 KeyCode, u8 curr_show){
 341   1        if(curr_show == 0){
 342   2          if(KeyCode == 17){
 343   3            if(hour == 23){
 344   4              hour = 0;
 345   4              changing(19, 1);
 346   4            }
 347   3            else{
 348   4               hour++;
 349   4            }
 350   3          }
 351   2          else if(KeyCode == 18){
 352   3            if(hour == 0){
 353   4              hour = 23;
 354   4              changing(20, 1);
 355   4            }
 356   3            else{
 357   4               hour--;
 358   4            }
 359   3          }
 360   2          else if (KeyCode == 19){
 361   3            if(minute == 59){
 362   4              minute = 0;
C51 COMPILER V9.01   MAIN                                                                  02/09/2019 20:00:05 PAGE 7   

 363   4              changing(17, 0);
 364   4            }
 365   3            else minute++;
 366   3            second = 0;
 367   3          }
 368   2          else if (KeyCode == 20){
 369   3            if(minute == 0){
 370   4              minute = 59;
 371   4              changing(18, 0);
 372   4            }
 373   3            else minute--;
 374   3            second = 0;
 375   3          }
 376   2          WriteRTC();
 377   2        }
 378   1        else if(curr_show == 1){
 379   2          if(KeyCode == 17){
 380   3            if(month == 12){
 381   4              year++;
 382   4              month = 1;
 383   4            }
 384   3            else month++;
 385   3          }
 386   2          else if(KeyCode == 18){
 387   3            if(month == 1){
 388   4              year--;
 389   4              month = 12;
 390   4            }
 391   3            else{
 392   4              month--;
 393   4            }
 394   3          }
 395   2          else if(KeyCode == 19){
 396   3              if(day == day_num[month-1]){
 397   4              day = 1;
 398   4              changing(17, 1);
 399   4            }
 400   3            else{
 401   4              ++day;
 402   4            }
 403   3          }
 404   2          else if(KeyCode == 20){
 405   3            if(day == 1){
 406   4              changing(18, 1);
 407   4              day = day_num[month-1];
 408   4            }
 409   3            else{
 410   4              day--;
 411   4            }
 412   3          }
 413   2        }
 414   1      }
 415          
 416          void alert(u8 _code){
 417   1        if(_code == 1){
 418   2          P17 = 0;
 419   2          P16 = 1;
 420   2          P47 = 1;
 421   2          P46 = 1;
 422   2        }
 423   1        if(_code == 2){
 424   2          P17 = 1;
C51 COMPILER V9.01   MAIN                                                                  02/09/2019 20:00:05 PAGE 8   

 425   2          P16 = 0;
 426   2          P47 = 1;
 427   2          P46 = 1;
 428   2        }
 429   1        if(_code == 3){
 430   2          P17 = 1;
 431   2          P16 = 1;
 432   2          P47 = 0;
 433   2          P46 = 1;
 434   2        }
 435   1        if(_code == 4){
 436   2          while(1)
 437   2          {
 438   3            P17 = 0;
 439   3            delay_ms(250);
 440   3            delay_ms(250);
 441   3            P17 = 1;
 442   3            P16 = 0;
 443   3            delay_ms(250);
 444   3            delay_ms(250);
 445   3            P16 = 1;
 446   3            P47 = 0;
 447   3            delay_ms(250);
 448   3            delay_ms(250);
 449   3            P47 = 1;
 450   3            P46 = 0;
 451   3            delay_ms(250);
 452   3            delay_ms(250);
 453   3            P46 = 1;
 454   3          }
 455   2        }
 456   1      }
 457          
 458          void reKey(){
 459   1        P17 = 1;  
 460   1        P16 = 1;
 461   1        P47 = 1;
 462   1        P46 = 1; 
 463   1        key[0] = 0;
 464   1        key[1] = 0;
 465   1        key[2] = 0;
 466   1        key[3] = 0;
 467   1        key[4] = 0;
 468   1        key[5] = 0;
 469   1        key[6] = 0;
 470   1        key[7] = 0;
 471   1        curr_input = 0;
 472   1      }
 473          
 474          
 475          
 476          
 477          /**************** 向HC595发送一个字节函数 ******************/
 478          void Send_595(u8 dat)
 479          {   
 480   1        u8  i;
 481   1        for(i=0; i<8; i++)
 482   1        {
 483   2          dat <<= 1;
 484   2          P_HC595_SER   = CY;
 485   2          P_HC595_SRCLK = 1;
 486   2          P_HC595_SRCLK = 0;
C51 COMPILER V9.01   MAIN                                                                  02/09/2019 20:00:05 PAGE 9   

 487   2        }
 488   1      }
 489          
 490          /********************** 显示扫描函数 ************************/
 491          void DisplayScan(void)
 492          { 
 493   1        Send_595(~T_COM[display_index]);        //输出位码
 494   1        Send_595(t_display[LED8[display_index]]); //输出段码
 495   1      
 496   1        P_HC595_RCLK = 1;
 497   1        P_HC595_RCLK = 0;             //锁存输出数据
 498   1        if(++display_index >= 8)  display_index = 0;  //8位结束回0
 499   1      }
 500          
 501          
 502          /********************** Timer0 1ms中断函数 ************************/
 503          void timer0 (void) interrupt TIMER0_VECTOR
 504          {
 505   1        DisplayScan();  //1ms扫描显示一位
 506   1        B_1ms = 1;    //1ms标志
 507   1      }
 508          
 509          void  delay_ms(u8 ms)
 510          {
 511   1           u16 i;
 512   1         do{
 513   2              i = MAIN_Fosc / 13000;
 514   2            while(--i)  ;   //14T per loop
 515   2           }while(--ms);
 516   1      }
 517          
 518          /*********************** 许延泽新增了四个通信函数 ****************/
 519          //========================================================================
 520          // 函数: SetTimer2Baudraye(u16 dat)
 521          // 描述: 设置Timer2做波特率发生器。
 522          // 参数: dat: Timer2的重装值.
 523          // 返回: none.
 524          // 版本: VER1.0
 525          // 日期: 2014-11-28
 526          // 备注: 
 527          //========================================================================
 528          void    SetTimer2Baudraye(u16 dat)  // 选择波特率, 2: 使用Timer2做波特率, 其它值: 使用Timer1做波特率.
 529          {
 530   1          AUXR &= ~(1<<4);    //Timer stop
 531   1          AUXR &= ~(1<<3);    //Timer2 set As Timer
 532   1          AUXR |=  (1<<2);    //Timer2 set as 1T mode
 533   1          TH2 = dat / 256;
 534   1          TL2 = dat % 256;
 535   1          IE2  &= ~(1<<2);    //禁止中断
 536   1          AUXR |=  (1<<4);    //Timer run enable
 537   1      }
 538          
 539          //========================================================================
 540          // 函数: void   UART1_config(u8 brt)
 541          // 描述: UART1初始化函数。
 542          // 参数: brt: 选择波特率, 2: 使用Timer2做波特率, 其它值: 使用Timer1做波特率.
 543          // 返回: none.
 544          // 版本: VER1.0
 545          // 日期: 2014-11-28
 546          // 备注: 
 547          //========================================================================
 548          void    UART1_config(u8 brt)    // 选择波特率, 2: 使用Timer2做波特率, 其它值: 使用Timer1做波特率.
C51 COMPILER V9.01   MAIN                                                                  02/09/2019 20:00:05 PAGE 10  

 549          {
 550   1          /*********** 波特率使用定时器2 *****************/
 551   1          if(brt == 2)
 552   1          {
 553   2              AUXR |= 0x01;       //S1 BRT Use Timer2;
 554   2              SetTimer2Baudraye(65536UL - (MAIN_Fosc / 4) / Baudrate1);
 555   2          }
 556   1      
 557   1          /*********** 波特率使用定时器1 *****************/
 558   1          else
 559   1          {
 560   2              TR1 = 0;
 561   2              AUXR &= ~0x01;      //S1 BRT Use Timer1;
 562   2              AUXR |=  (1<<6);    //Timer1 set as 1T mode
 563   2              TMOD &= ~(1<<6);    //Timer1 set As Timer
 564   2              TMOD &= ~0x30;      //Timer1_16bitAutoReload;
 565   2              TH1 = (u8)((65536UL - (MAIN_Fosc / 4) / Baudrate1) / 256);
 566   2              TL1 = (u8)((65536UL - (MAIN_Fosc / 4) / Baudrate1) % 256);
 567   2              ET1 = 0;    //禁止中断
 568   2              INT_CLKO &= ~0x02;  //不输出时钟
 569   2              TR1  = 1;
 570   2          }
 571   1          /*************************************************/
 572   1      
 573   1          SCON = (SCON & 0x3f) | 0x40;    //UART1模式, 0x00: 同步移位输出, 0x40: 8位数据,可变波特率, 0x80: 9位数
             -据,固定波特率, 0xc0: 9位数据,可变波特率
 574   1      //  PS  = 1;    //高优先级中断
 575   1          ES  = 1;    //允许中断
 576   1          REN = 1;    //允许接收
 577   1          P_SW1 &= 0x3f;
 578   1          P_SW1 |= 0x80;      //UART1 switch to, 0x00: P3.0 P3.1, 0x40: P3.6 P3.7, 0x80: P1.6 P1.7 (必须使用内部
             -时钟)
 579   1      //  PCON2 |=  (1<<4);   //内部短路RXD与TXD, 做中继, ENABLE,DISABLE
 580   1      
 581   1          B_TX1_Busy = 0;
 582   1          TX1_Cnt = 0;
 583   1          RX1_Cnt = 0;
 584   1      }
 585          
 586          
 587          void PrintString1(u8 *puts) //使用uart1发送一个字符串
 588          {
 589   1          for (; *puts != 0;  puts++)     //遇到停止符0结束
 590   1          {
 591   2              SBUF = *puts;
 592   2              B_TX1_Busy = 1;
 593   2              while(B_TX1_Busy);
 594   2          }
 595   1      }
 596          
 597          //========================================================================
 598          // 函数: void UART1_int (void) interrupt UART1_VECTOR
 599          // 描述: UART1中断函数。
 600          // 参数: nine.
 601          // 返回: none.
 602          // 版本: VER1.0
 603          // 日期: 2014-11-28
 604          // 备注: 
 605          //========================================================================
 606          void UART1_int (void) interrupt 4
 607          {
 608   1          if(RI)
C51 COMPILER V9.01   MAIN                                                                  02/09/2019 20:00:05 PAGE 11  

 609   1          {
 610   2              RI = 0;
 611   2              RX1_Buffer[RX1_Cnt] = SBUF;
 612   2              if(++RX1_Cnt >= UART1_BUF_LENGTH)   RX1_Cnt = 0;    //防溢出
 613   2          }
 614   1      
 615   1          if(TI)
 616   1          {
 617   2              TI = 0;
 618   2              B_TX1_Busy = 0;
 619   2          }
 620   1      }
 621          
 622          //反转字符串
 623          u8 *reverse(u8 *s)
 624          {
 625   1          u8 temp;
 626   1          u8 *p = s;    //p指向s的头部
 627   1          u8 *q = s;    //q指向s的尾部
 628   1          while(*q)
 629   1              ++q;
 630   1          q--;
 631   1          
 632   1          //交换移动指针，直到p和q交叉
 633   1          while(q > p)
 634   1          {
 635   2              temp = *p;
 636   2              *p++ = *q;
 637   2              *q-- = temp;
 638   2          }
 639   1          return s;
 640   1      }
 641          
 642          /*
 643           * 功能：整数转换为字符串
 644           * char s[] 的作用是存储整数的每一位
 645           */
 646          u8 *my_itoa(u16 n)
 647          {
 648   1          int i = 0,isNegative = 0;
 649   1          static u8 s[10];      //必须为static变量，或者是全局变量
 650   1          if((isNegative = n) < 0) //如果是负数，先转为正数
 651   1          {
 652   2              n = -n;
 653   2          }
 654   1          do      //从各位开始变为字符，直到最高位，最后应该反转
 655   1          {
 656   2              s[i++] = n%10 + '0';
 657   2              n = n/10;
 658   2          }while(n > 0);
 659   1          
 660   1          if(isNegative < 0)   //如果是负数，补上负号
 661   1          {
 662   2              s[i++] = '-';
 663   2          }
 664   1          s[i] = '\0';    //最后加上字符串结束符
 665   1          return reverse(s);
 666   1      }
 667          
 668          //移动端控制
 669          
 670          void connect_init()
C51 COMPILER V9.01   MAIN                                                                  02/09/2019 20:00:05 PAGE 12  

 671          {
 672   1        char *e = "AT+CIPMUX=1\r\n";
 673   1        char *f = "AT+CIPSERVER=1,8080\r\n";
 674   1        
 675   1        while(*e != '\0') {
 676   2          SBUF = *e;
 677   2          while(!TI);
 678   2          TI = 0;
 679   2          e++;
 680   2        }
 681   1        delay_ms(10);
 682   1        while(*f != '\0') {
 683   2          SBUF = *f;
 684   2          while(!TI);
 685   2          TI = 0;
 686   2          f++;
 687   2        }
 688   1      }
 689          
 690          void set_Status(){  //设置状态 用于移动端控制
 691   1        u8 newStatus = SBUF;
 692   1        if(newStatus == 1){
 693   2           open = 1;
 694   2           curr_state = 1;
 695   2        }
 696   1        else if(newStatus == 0){
 697   2           open = 0;
 698   2           curr_state = 0;
 699   2        }
 700   1        else{
 701   2          //不操作
 702   2        }
 703   1      } 
 704          
 705          void UartConfiguration()
 706          {
 707   1        TMOD = 0x20;  //timer1 mode2
 708   1        TH1 = 0xfd;   //timer1 init
 709   1        TL1 = 0xfd;   //timer1 init
 710   1        PCON = 0x00;  //baud no multi
 711   1        SCON = 0x50;  //mode1 receive open
 712   1        ES = 1;       //ttl interrupt ok
 713   1        TR1 = 1;      //timer1 run
 714   1      }
 715          
 716          void esp8266_init()
 717          {
 718   1        UartConfiguration();
 719   1        TI = 0;
 720   1        connect_init();
 721   1      }
 722          
 723          
 724          void sendStatus(u8 sta)
 725          {
 726   1        ES = 0;
 727   1        SBUF = sta;
 728   1        while(!TI);
 729   1        TI = 0;
 730   1        ES = 1;
 731   1      }
 732          
C51 COMPILER V9.01   MAIN                                                                  02/09/2019 20:00:05 PAGE 13  

 733          
 734          void Uart() interrupt 4
 735          {
 736   1        char *send = "AT+CIPSEND=0,4\r\n";
 737   1        char res;
 738   1        res = SBUF;
 739   1        RI = 0;
 740   1        if (res==':'||ptr>0) {
 741   2          if (res == '\n') {
 742   3            if (*control_order == ":get") {
 743   4              while(*send != '\0') {
 744   5                SBUF = *send;
 745   5                while(!TI);
 746   5                TI = 0;
 747   5                send++;
 748   5              }
 749   4              delay_ms(10);
 750   4              sendStatus(curr_state);
 751   4            }
 752   3            ptr = 0;
 753   3            memset(control_order,0,10);
 754   3          } else {
 755   3            control_order[ptr] = res;
 756   3            ptr++;
 757   3          }
 758   2        }
 759   1      }
 760          
 761          
 762          /*
 763          void UartConfiguration();
 764          void esp8266_init();
 765          void  set_Status(u8 newStatus);
 766          void sentInt(u16 i);
 767          void Uart();
 768          
 769          */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2171    ----
   CONSTANT SIZE    =    111    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     85      25
   IDATA SIZE       =     32    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
